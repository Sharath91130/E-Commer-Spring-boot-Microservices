package com.ecommerce.microservice.Filter;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Component

public class ApiKeyFilter implements GlobalFilter {

    @Value("${gateway.secret-key}")
    private String secretKey;


	@Override
	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
		String path = exchange.getRequest().getURI().getPath();
		if (path.startsWith("/user/") || path.startsWith("/order/") || path.startsWith("/product/")) {
            String apiKey = exchange.getRequest().getHeaders().getFirst("Secret-Key");

            if (apiKey == null || !apiKey.equals(secretKey)) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }
        }
		  return chain.filter(exchange);
	}
}
